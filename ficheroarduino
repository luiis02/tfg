#include <WiFi.h>
#include <HTTPClient.h>

// Configura los detalles de la red WiFi
const char* ssid = "TP-Link_C7D4";
const char* password = "56027563";

// Configura el pin del micrófono y el búfer
const int micPin = 34;  // Pin ADC donde está conectado el OUT del MAX9814
const int sampleRate = 16000;  // Frecuencia de muestreo aumentada a 16 kHz
const int duration = 2;  // Duración del segmento en segundos
const int bufferSize = sampleRate * duration;  // Tamaño del búfer para 5 segundos
int16_t buffer[bufferSize];

void setup() {
  Serial.begin(115200);

  // Configura el pin del micrófono
  analogReadResolution(12);  // Reducción de la resolución de ADC a 12 bits

  // Conéctate a la red WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conectado a WiFi");
}

void loop() {
  // Captura la señal de audio
  for (int i = 0; i < bufferSize; i++) {
    buffer[i] = analogRead(micPin);
    delayMicroseconds(1000000 / sampleRate);
  }

  // Envia el audio al servidor Flask
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("http://192.168.0.2:5000/audio");  // Cambia esto a la URL de tu servidor Flask

    // Configura la cabecera y envía el buffer de audio como datos binarios
    http.addHeader("Content-Type", "application/octet-stream");
    int httpResponseCode = http.POST((uint8_t*)buffer, bufferSize * sizeof(int16_t));

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      String response = http.getString();
      Serial.print("Response: ");
      Serial.println(response);
    } else {
      Serial.print("Error en HTTP POST: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("WiFi no conectado");
  }
}